// <auto-generated />
using System;
using GreatSmiles.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GreatSmiles.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20200830222101_finalmigration")]
    partial class finalmigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("GreatSmiles.Models.Competition", b =>
                {
                    b.Property<int>("CompetitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CompetitionTitle")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Date")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("EntrantId")
                        .HasColumnType("int");

                    b.Property<int>("PhotoId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Time")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("CompetitionId");

                    b.ToTable("DbCompetitions");
                });

            modelBuilder.Entity("GreatSmiles.Models.Entrant", b =>
                {
                    b.Property<int>("EntrantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EntrantName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("EntrantId");

                    b.ToTable("DbEntrants");
                });

            modelBuilder.Entity("GreatSmiles.Models.Photo", b =>
                {
                    b.Property<int>("PhotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CompetitionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("EntrantId")
                        .HasColumnType("int");

                    b.Property<int>("OfficialId")
                        .HasColumnType("int");

                    b.Property<string>("PhotoName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Quality")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Story")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("VoterId")
                        .HasColumnType("int");

                    b.HasKey("PhotoId");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("EntrantId");

                    b.HasIndex("OfficialId");

                    b.ToTable("DbPhotos");
                });

            modelBuilder.Entity("GreatSmiles.Models.RSVP", b =>
                {
                    b.Property<int>("SmilerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("PhotoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("VoterId")
                        .HasColumnType("int");

                    b.HasKey("SmilerId");

                    b.HasIndex("PhotoId");

                    b.HasIndex("VoterId");

                    b.ToTable("DbSmilers");
                });

            modelBuilder.Entity("GreatSmiles.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CompetitionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4")
                        .HasMaxLength(10);

                    b.Property<bool>("IsVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(15) CHARACTER SET utf8mb4")
                        .HasMaxLength(15);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserStory")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("UserId");

                    b.HasIndex("CompetitionId");

                    b.ToTable("DbUsers");
                });

            modelBuilder.Entity("GreatSmiles.Models.Photo", b =>
                {
                    b.HasOne("GreatSmiles.Models.Competition", null)
                        .WithMany("AllPhotos")
                        .HasForeignKey("CompetitionId");

                    b.HasOne("GreatSmiles.Models.Entrant", null)
                        .WithMany("Photos")
                        .HasForeignKey("EntrantId");

                    b.HasOne("GreatSmiles.Models.User", "Official")
                        .WithMany("AllPhotos")
                        .HasForeignKey("OfficialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GreatSmiles.Models.RSVP", b =>
                {
                    b.HasOne("GreatSmiles.Models.Photo", "Photo")
                        .WithMany("PhotoSmilers")
                        .HasForeignKey("PhotoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GreatSmiles.Models.User", "Voter")
                        .WithMany("AllSmiledPhotos")
                        .HasForeignKey("VoterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GreatSmiles.Models.User", b =>
                {
                    b.HasOne("GreatSmiles.Models.Competition", null)
                        .WithMany("AllEntrants")
                        .HasForeignKey("CompetitionId");
                });
#pragma warning restore 612, 618
        }
    }
}
